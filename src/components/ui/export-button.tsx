import { useState } from "react";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Download, FileText, Printer } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import jsPDF from "jspdf";

interface ExportButtonProps {
  soapNote: string;
  patientId?: string;
  className?: string;
}

const ExportButton = ({ soapNote, patientId = "Unknown", className }: ExportButtonProps) => {
  const [isExporting, setIsExporting] = useState(false);
  const { toast } = useToast();

  const exportToPDF = async () => {
    setIsExporting(true);
    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const margin = 20;
      const maxWidth = pageWidth - 2 * margin;

      // Header
      pdf.setFontSize(18);
      pdf.setFont(undefined, 'bold');
      pdf.text('SOAP Note - medic.ai', margin, 30);
      
      pdf.setFontSize(12);
      pdf.setFont(undefined, 'normal');
      pdf.text(`Generated: ${new Date().toLocaleString()}`, margin, 40);
      pdf.text(`Patient ID: ${patientId}`, margin, 50);

      // Add a line
      pdf.line(margin, 55, pageWidth - margin, 55);

      // Content
      pdf.setFontSize(11);
      const lines = pdf.splitTextToSize(soapNote, maxWidth);
      let yPosition = 70;

      lines.forEach((line: string) => {
        if (yPosition > 280) { // Start new page if needed
          pdf.addPage();
          yPosition = 30;
        }
        pdf.text(line, margin, yPosition);
        yPosition += 6;
      });

      // Footer
      const pageCount = pdf.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        pdf.setPage(i);
        pdf.setFontSize(8);
        pdf.text(
          `Page ${i} of ${pageCount} | Generated by medic.ai`,
          margin,
          pdf.internal.pageSize.getHeight() - 10
        );
      }

      pdf.save(`SOAP_Note_${patientId}_${new Date().toISOString().split('T')[0]}.pdf`);
      
      toast({
        title: "PDF exported successfully",
        description: "Your SOAP note has been saved as a PDF file.",
      });
    } catch (error) {
      toast({
        title: "Export failed",
        description: "Unable to export PDF. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(false);
    }
  };

  const exportToText = () => {
    const element = document.createElement("a");
    const file = new Blob([soapNote], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `SOAP_Note_${patientId}_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
    
    toast({
      title: "Text file exported",
      description: "Your SOAP note has been saved as a text file.",
    });
  };

  const printNote = () => {
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(`
        <html>
          <head>
            <title>SOAP Note - ${patientId}</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
              .header { border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }
              .content { white-space: pre-wrap; }
              .footer { margin-top: 40px; border-top: 1px solid #ccc; padding-top: 20px; font-size: 12px; color: #666; }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>SOAP Note - medic.ai</h1>
              <p>Generated: ${new Date().toLocaleString()}</p>
              <p>Patient ID: ${patientId}</p>
            </div>
            <div class="content">${soapNote}</div>
            <div class="footer">
              <p>Generated by medic.ai - For demonstration purposes only</p>
            </div>
          </body>
        </html>
      `);
      printWindow.document.close();
      printWindow.print();
    }
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="sm" className={className} disabled={isExporting}>
          <Download className="h-4 w-4 mr-2" />
          {isExporting ? "Exporting..." : "Export"}
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={exportToPDF} className="cursor-pointer">
          <FileText className="h-4 w-4 mr-2" />
          Export as PDF
        </DropdownMenuItem>
        <DropdownMenuItem onClick={exportToText} className="cursor-pointer">
          <FileText className="h-4 w-4 mr-2" />
          Export as Text
        </DropdownMenuItem>
        <DropdownMenuItem onClick={printNote} className="cursor-pointer">
          <Printer className="h-4 w-4 mr-2" />
          Print
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default ExportButton;